#include <iostream>
#include <fstream>

void WritePhpIni(std::ofstream& stream) {
	stream << "[PHP]\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; About php.ini   ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; PHP's initialization file, generally called php.ini, is responsible for\n";
	stream << "; configuring many of the aspects of PHP's behavior.\n";
	stream << "\n";
	stream << "; PHP attempts to find and load this configuration from a number of locations.\n";
	stream << "; The following is a summary of its search order:\n";
	stream << "; 1. SAPI module specific location.\n";
	stream << "; 2. The PHPRC environment variable. (As of PHP 5.2.0)\n";
	stream << "; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0)\n";
	stream << "; 4. Current working directory (except CLI)\n";
	stream << "; 5. The web server's directory (for SAPI modules), or directory of PHP\n";
	stream << "; (otherwise in Windows)\n";
	stream << "; 6. The directory from the --with-config-file-path compile time option, or the\n";
	stream << "; Windows directory (C:\\windows or C:\\winnt)\n";
	stream << "; See the PHP docs for more specific information.\n";
	stream << "; http://php.net/configuration.file\n";
	stream << "\n";
	stream << "; The syntax of the file is extremely simple.  Whitespace and lines\n";
	stream << "; beginning with a semicolon are silently ignored (as you probably guessed).\n";
	stream << "; Section headers (e.g. [Foo]) are also silently ignored, even though\n";
	stream << "; they might mean something in the future.\n";
	stream << "\n";
	stream << "; Directives following the section heading [PATH=/www/mysite] only\n";
	stream << "; apply to PHP files in the /www/mysite directory.  Directives\n";
	stream << "; following the section heading [HOST=www.example.com] only apply to\n";
	stream << "; PHP files served from www.example.com.  Directives set in these\n";
	stream << "; special sections cannot be overridden by user-defined INI files or\n";
	stream << "; at runtime. Currently, [PATH=] and [HOST=] sections only work under\n";
	stream << "; CGI/FastCGI.\n";
	stream << "; http://php.net/ini.sections\n";
	stream << "\n";
	stream << "; Directives are specified using the following syntax:\n";
	stream << "; directive = value\n";
	stream << "; Directive names are *case sensitive* - foo=bar is different from FOO=bar.\n";
	stream << "; Directives are variables used to configure PHP or PHP extensions.\n";
	stream << "; There is no name validation.  If PHP can't find an expected\n";
	stream << "; directive because it is not set or is mistyped, a default value will be used.\n";
	stream << "\n";
	stream << "; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one\n";
	stream << "; of the INI constants (On, Off, True, False, Yes, No and None) or an expression\n";
	stream << "; (e.g. E_ALL & ~E_NOTICE), a quoted string (\"bar\"), or a reference to a\n";
	stream << "; previously set variable or directive (e.g. ${foo})\n";
	stream << "\n";
	stream << "; Expressions in the INI file are limited to bitwise operators and parentheses:\n";
	stream << "; |  bitwise OR\n";
	stream << "; ^  bitwise XOR\n";
	stream << "; &  bitwise AND\n";
	stream << "; ~  bitwise NOT\n";
	stream << "; !  boolean NOT\n";
	stream << "\n";
	stream << "; Boolean flags can be turned on using the values 1, On, True or Yes.\n";
	stream << "; They can be turned off using the values 0, Off, False or No.\n";
	stream << "\n";
	stream << "; An empty string can be denoted by simply not writing anything after the equal\n";
	stream << "; sign, or by using the None keyword:\n";
	stream << "\n";
	stream << ";  foo =         ; sets foo to an empty string\n";
	stream << ";  foo = None    ; sets foo to an empty string\n";
	stream << ";  foo = \"None\"  ; sets foo to the string 'None'\n";
	stream << "\n";
	stream << "; If you use constants in your value, and these constants belong to a\n";
	stream << "; dynamically loaded extension (either a PHP extension or a Zend extension),\n";
	stream << "; you may only use these constants *after* the line that loads the extension.\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; About this file ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; PHP comes packaged with two INI files. One that is recommended to be used\n";
	stream << "; in production environments and one that is recommended to be used in\n";
	stream << "; development environments.\n";
	stream << "\n";
	stream << "; php.ini-production contains settings which hold security, performance and\n";
	stream << "; best practices at its core. But please be aware, these settings may break\n";
	stream << "; compatibility with older or less security conscience applications. We\n";
	stream << "; recommending using the production ini in production and testing environments.\n";
	stream << "\n";
	stream << "; php.ini-development is very similar to its production variant, except it's\n";
	stream << "; much more verbose when it comes to errors. We recommending using the\n";
	stream << "; development version only in development environments as errors shown to\n";
	stream << "; application users can inadvertently leak otherwise secure information.\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; Quick Reference ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; The following are all the settings which are different in either the production\n";
	stream << "; or development versions of the INIs with respect to PHP's default behavior.\n";
	stream << "; Please see the actual settings later in the document for more details as to why\n";
	stream << "; we recommend these changes in PHP's behavior.\n";
	stream << "\n";
	stream << "; display_errors\n";
	stream << ";   Default Value: On\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; display_startup_errors\n";
	stream << ";   Default Value: Off\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; error_reporting\n";
	stream << ";   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\n";
	stream << ";   Development Value: E_ALL\n";
	stream << ";   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\n";
	stream << "\n";
	stream << "; html_errors\n";
	stream << ";   Default Value: On\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production value: On\n";
	stream << "\n";
	stream << "; log_errors\n";
	stream << ";   Default Value: Off\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production Value: On\n";
	stream << "\n";
	stream << "; max_input_time\n";
	stream << ";   Default Value: -1 (Unlimited)\n";
	stream << ";   Development Value: 60 (60 seconds)\n";
	stream << ";   Production Value: 60 (60 seconds)\n";
	stream << "\n";
	stream << "; output_buffering\n";
	stream << ";   Default Value: Off\n";
	stream << ";   Development Value: 4096\n";
	stream << ";   Production Value: 4096\n";
	stream << "\n";
	stream << "; register_argc_argv\n";
	stream << ";   Default Value: On\n";
	stream << ";   Development Value: Off\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; request_order\n";
	stream << ";   Default Value: None\n";
	stream << ";   Development Value: \"GP\"\n";
	stream << ";   Production Value: \"GP\"\n";
	stream << "\n";
	stream << "; session.bug_compat_42\n";
	stream << ";   Default Value: On\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; session.bug_compat_warn\n";
	stream << ";   Default Value: On\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; session.gc_divisor\n";
	stream << ";   Default Value: 100\n";
	stream << ";   Development Value: 1000\n";
	stream << ";   Production Value: 1000\n";
	stream << "\n";
	stream << "; session.hash_bits_per_character\n";
	stream << ";   Default Value: 4\n";
	stream << ";   Development Value: 5\n";
	stream << ";   Production Value: 5\n";
	stream << "\n";
	stream << "; short_open_tag\n";
	stream << ";   Default Value: On\n";
	stream << ";   Development Value: Off\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; track_errors\n";
	stream << ";   Default Value: Off\n";
	stream << ";   Development Value: On\n";
	stream << ";   Production Value: Off\n";
	stream << "\n";
	stream << "; url_rewriter.tags\n";
	stream << ";   Default Value: \"a=href,area=href,frame=src,form=,fieldset=\"\n";
	stream << ";   Development Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\n";
	stream << ";   Production Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\n";
	stream << "\n";
	stream << "; variables_order\n";
	stream << ";   Default Value: \"EGPCS\"\n";
	stream << ";   Development Value: \"GPCS\"\n";
	stream << ";   Production Value: \"GPCS\"\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;;\n";
	stream << "; php.ini Options  ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;;\n";
	stream << "; Name for user-defined php.ini (.htaccess) files. Default is \".user.ini\"\n";
	stream << ";user_ini.filename = \".user.ini\"\n";
	stream << "\n";
	stream << "; To disable this feature set this option to empty value\n";
	stream << ";user_ini.filename =\n";
	stream << "\n";
	stream << "; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)\n";
	stream << ";user_ini.cache_ttl = 300\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;;\n";
	stream << "; Language Options ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; Enable the PHP scripting language engine under Apache.\n";
	stream << "; http://php.net/engine\n";
	stream << "engine = On\n";
	stream << "\n";
	stream << "; This directive determines whether or not PHP will recognize code between\n";
	stream << "; <? and ?> tags as PHP source which should be processed as such. It's been\n";
	stream << "; recommended for several years that you not use the short tag \"short cut\" and\n";
	stream << "; instead to use the full <?php and ?> tag combination. With the wide spread use\n";
	stream << "; of XML and use of these tags by other languages, the server can become easily\n";
	stream << "; confused and end up parsing the wrong code in the wrong context. But because\n";
	stream << "; this short cut has been a feature for such a long time, it's currently still\n";
	stream << "; supported for backwards compatibility, but we recommend you don't use them.\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: Off\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/short-open-tag\n";
	stream << "short_open_tag = Off\n";
	stream << "\n";
	stream << "; Allow ASP-style <% %> tags.\n";
	stream << "; http://php.net/asp-tags\n";
	stream << "asp_tags = Off\n";
	stream << "\n";
	stream << "; The number of significant digits displayed in floating point numbers.\n";
	stream << "; http://php.net/precision\n";
	stream << "precision = 14\n";
	stream << "\n";
	stream << "; Output buffering is a mechanism for controlling how much output data\n";
	stream << "; (excluding headers and cookies) PHP should keep internally before pushing that\n";
	stream << "; data to the client. If your application's output exceeds this setting, PHP\n";
	stream << "; will send that data in chunks of roughly the size you specify.\n";
	stream << "; Turning on this setting and managing its maximum buffer size can yield some\n";
	stream << "; interesting side-effects depending on your application and web server.\n";
	stream << "; You may be able to send headers and cookies after you've already sent output\n";
	stream << "; through print or echo. You also may see performance benefits if your server is\n";
	stream << "; emitting less packets due to buffered output versus PHP streaming the output\n";
	stream << "; as it gets it. On production servers, 4096 bytes is a good setting for performance\n";
	stream << "; reasons.\n";
	stream << "; Note: Output buffering can also be controlled via Output Buffering Control\n";
	stream << ";   functions.\n";
	stream << "; Possible Values:\n";
	stream << ";   On = Enabled and buffer is unlimited. (Use with caution)\n";
	stream << ";   Off = Disabled\n";
	stream << ";   Integer = Enables the buffer and sets its maximum size in bytes.\n";
	stream << "; Note: This directive is hardcoded to Off for the CLI SAPI\n";
	stream << "; Default Value: Off\n";
	stream << "; Development Value: 4096\n";
	stream << "; Production Value: 4096\n";
	stream << "; http://php.net/output-buffering\n";
	stream << "output_buffering = 4096\n";
	stream << "\n";
	stream << "; You can redirect all of the output of your scripts to a function.  For\n";
	stream << "; example, if you set output_handler to \"mb_output_handler\", character\n";
	stream << "; encoding will be transparently converted to the specified encoding.\n";
	stream << "; Setting any output handler automatically turns on output buffering.\n";
	stream << "; Note: People who wrote portable scripts should not depend on this ini\n";
	stream << ";   directive. Instead, explicitly set the output handler using ob_start().\n";
	stream << ";   Using this ini directive may cause problems unless you know what script\n";
	stream << ";   is doing.\n";
	stream << "; Note: You cannot use both \"mb_output_handler\" with \"ob_iconv_handler\"\n";
	stream << ";   and you cannot use both \"ob_gzhandler\" and \"zlib.output_compression\".\n";
	stream << "; Note: output_handler must be empty if this is set 'On' !!!!\n";
	stream << ";   Instead you must use zlib.output_handler.\n";
	stream << "; http://php.net/output-handler\n";
	stream << ";output_handler =\n";
	stream << "\n";
	stream << "; Transparent output compression using the zlib library\n";
	stream << "; Valid values for this option are 'off', 'on', or a specific buffer size\n";
	stream << "; to be used for compression (default is 4KB)\n";
	stream << "; Note: Resulting chunk size may vary due to nature of compression. PHP\n";
	stream << ";   outputs chunks that are few hundreds bytes each as a result of\n";
	stream << ";   compression. If you prefer a larger chunk size for better\n";
	stream << ";   performance, enable output_buffering in addition.\n";
	stream << "; Note: You need to use zlib.output_handler instead of the standard\n";
	stream << ";   output_handler, or otherwise the output will be corrupted.\n";
	stream << "; http://php.net/zlib.output-compression\n";
	stream << "zlib.output_compression = Off\n";
	stream << "\n";
	stream << "; http://php.net/zlib.output-compression-level\n";
	stream << ";zlib.output_compression_level = -1\n";
	stream << "\n";
	stream << "; You cannot specify additional output handlers if zlib.output_compression\n";
	stream << "; is activated here. This setting does the same as output_handler but in\n";
	stream << "; a different order.\n";
	stream << "; http://php.net/zlib.output-handler\n";
	stream << ";zlib.output_handler =\n";
	stream << "\n";
	stream << "; Implicit flush tells PHP to tell the output layer to flush itself\n";
	stream << "; automatically after every output block.  This is equivalent to calling the\n";
	stream << "; PHP function flush() after each and every call to print() or echo() and each\n";
	stream << "; and every HTML block.  Turning this option on has serious performance\n";
	stream << "; implications and is generally recommended for debugging purposes only.\n";
	stream << "; http://php.net/implicit-flush\n";
	stream << "; Note: This directive is hardcoded to On for the CLI SAPI\n";
	stream << "implicit_flush = Off\n";
	stream << "\n";
	stream << "; The unserialize callback function will be called (with the undefined class'\n";
	stream << "; name as parameter), if the unserializer finds an undefined class\n";
	stream << "; which should be instantiated. A warning appears if the specified function is\n";
	stream << "; not defined, or if the function doesn't include/implement the missing class.\n";
	stream << "; So only set this entry, if you really want to implement such a\n";
	stream << "; callback-function.\n";
	stream << "unserialize_callback_func =\n";
	stream << "\n";
	stream << "; When floats & doubles are serialized store serialize_precision significant\n";
	stream << "; digits after the floating point. The default value ensures that when floats\n";
	stream << "; are decoded with unserialize, the data will remain the same.\n";
	stream << "serialize_precision = 17\n";
	stream << "\n";
	stream << "; open_basedir, if set, limits all file operations to the defined directory\n";
	stream << "; and below.  This directive makes most sense if used in a per-directory\n";
	stream << "; or per-virtualhost web server configuration file. This directive is\n";
	stream << "; *NOT* affected by whether Safe Mode is turned On or Off.\n";
	stream << "; http://php.net/open-basedir\n";
	stream << ";open_basedir =\n";
	stream << "\n";
	stream << "; This directive allows you to disable certain functions for security reasons.\n";
	stream << "; It receives a comma-delimited list of function names. This directive is\n";
	stream << "; *NOT* affected by whether Safe Mode is turned On or Off.\n";
	stream << "; http://php.net/disable-functions\n";
	stream << "disable_functions =\n";
	stream << "\n";
	stream << "; This directive allows you to disable certain classes for security reasons.\n";
	stream << "; It receives a comma-delimited list of class names. This directive is\n";
	stream << "; *NOT* affected by whether Safe Mode is turned On or Off.\n";
	stream << "; http://php.net/disable-classes\n";
	stream << "disable_classes =\n";
	stream << "\n";
	stream << "; Colors for Syntax Highlighting mode.  Anything that's acceptable in\n";
	stream << "; <span style=\"color: ???????\"> would work.\n";
	stream << "; http://php.net/syntax-highlighting\n";
	stream << ";highlight.string  = #DD0000\n";
	stream << ";highlight.comment = #FF9900\n";
	stream << ";highlight.keyword = #007700\n";
	stream << ";highlight.default = #0000BB\n";
	stream << ";highlight.html    = #000000\n";
	stream << "\n";
	stream << "; If enabled, the request will be allowed to complete even if the user aborts\n";
	stream << "; the request. Consider enabling it if executing long requests, which may end up\n";
	stream << "; being interrupted by the user or a browser timing out. PHP's default behavior\n";
	stream << "; is to disable this feature.\n";
	stream << "; http://php.net/ignore-user-abort\n";
	stream << ";ignore_user_abort = On\n";
	stream << "\n";
	stream << "; Determines the size of the realpath cache to be used by PHP. This value should\n";
	stream << "; be increased on systems where PHP opens many files to reflect the quantity of\n";
	stream << "; the file operations performed.\n";
	stream << "; http://php.net/realpath-cache-size\n";
	stream << ";realpath_cache_size = 16k\n";
	stream << "\n";
	stream << "; Duration of time, in seconds for which to cache realpath information for a given\n";
	stream << "; file or directory. For systems with rarely changing files, consider increasing this\n";
	stream << "; value.\n";
	stream << "; http://php.net/realpath-cache-ttl\n";
	stream << ";realpath_cache_ttl = 120\n";
	stream << "\n";
	stream << "; Enables or disables the circular reference collector.\n";
	stream << "; http://php.net/zend.enable-gc\n";
	stream << "zend.enable_gc = On\n";
	stream << "\n";
	stream << "; If enabled, scripts may be written in encodings that are incompatible with\n";
	stream << "; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such\n";
	stream << "; encodings.  To use this feature, mbstring extension must be enabled.\n";
	stream << "; Default: Off\n";
	stream << ";zend.multibyte = Off\n";
	stream << "\n";
	stream << "; Allows to set the default encoding for the scripts.  This value will be used\n";
	stream << "; unless \"declare(encoding=...)\" directive appears at the top of the script.\n";
	stream << "; Only affects if zend.multibyte is set.\n";
	stream << "; Default: \"\"\n";
	stream << ";zend.script_encoding =\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;\n";
	stream << "; Miscellaneous ;\n";
	stream << ";;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; Decides whether PHP may expose the fact that it is installed on the server\n";
	stream << "; (e.g. by adding its signature to the Web server header).  It is no security\n";
	stream << "; threat in any way, but it makes it possible to determine whether you use PHP\n";
	stream << "; on your server or not.\n";
	stream << "; http://php.net/expose-php\n";
	stream << "expose_php = On\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; Resource Limits ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; Maximum execution time of each script, in seconds\n";
	stream << "; http://php.net/max-execution-time\n";
	stream << "; Note: This directive is hardcoded to 0 for the CLI SAPI\n";
	stream << "max_execution_time = 30\n";
	stream << "\n";
	stream << "; Maximum amount of time each script may spend parsing request data. It's a good\n";
	stream << "; idea to limit this time on productions servers in order to eliminate unexpectedly\n";
	stream << "; long running scripts.\n";
	stream << "; Note: This directive is hardcoded to -1 for the CLI SAPI\n";
	stream << "; Default Value: -1 (Unlimited)\n";
	stream << "; Development Value: 60 (60 seconds)\n";
	stream << "; Production Value: 60 (60 seconds)\n";
	stream << "; http://php.net/max-input-time\n";
	stream << "max_input_time = 60\n";
	stream << "\n";
	stream << "; Maximum input variable nesting level\n";
	stream << "; http://php.net/max-input-nesting-level\n";
	stream << ";max_input_nesting_level = 64\n";
	stream << "\n";
	stream << "; How many GET/POST/COOKIE input variables may be accepted\n";
	stream << "; max_input_vars = 1000\n";
	stream << "\n";
	stream << "; Maximum amount of memory a script may consume (128MB)\n";
	stream << "; http://php.net/memory-limit\n";
	stream << "memory_limit = 128M\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n";
	stream << "; Error handling and logging ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; This directive informs PHP of which errors, warnings and notices you would like\n";
	stream << "; it to take action for. The recommended way of setting values for this\n";
	stream << "; directive is through the use of the error level constants and bitwise\n";
	stream << "; operators. The error level constants are below here for convenience as well as\n";
	stream << "; some common settings and their meanings.\n";
	stream << "; By default, PHP is set to take action on all errors, notices and warnings EXCEPT\n";
	stream << "; those related to E_NOTICE and E_STRICT, which together cover best practices and\n";
	stream << "; recommended coding standards in PHP. For performance reasons, this is the\n";
	stream << "; recommend error reporting setting. Your production server shouldn't be wasting\n";
	stream << "; resources complaining about best practices and coding standards. That's what\n";
	stream << "; development servers and development settings are for.\n";
	stream << "; Note: The php.ini-development file has this setting as E_ALL. This\n";
	stream << "; means it pretty much reports everything which is exactly what you want during\n";
	stream << "; development and early testing.\n";
	stream << ";\n";
	stream << "; Error Level Constants:\n";
	stream << "; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)\n";
	stream << "; E_ERROR           - fatal run-time errors\n";
	stream << "; E_RECOVERABLE_ERROR  - almost fatal run-time errors\n";
	stream << "; E_WARNING         - run-time warnings (non-fatal errors)\n";
	stream << "; E_PARSE           - compile-time parse errors\n";
	stream << "; E_NOTICE          - run-time notices (these are warnings which often result\n";
	stream << ";                     from a bug in your code, but it's possible that it was\n";
	stream << ";                     intentional (e.g., using an uninitialized variable and\n";
	stream << ";                     relying on the fact it's automatically initialized to an\n";
	stream << ";                     empty string)\n";
	stream << "; E_STRICT          - run-time notices, enable to have PHP suggest changes\n";
	stream << ";                     to your code which will ensure the best interoperability\n";
	stream << ";                     and forward compatibility of your code\n";
	stream << "; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup\n";
	stream << "; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's\n";
	stream << ";                     initial startup\n";
	stream << "; E_COMPILE_ERROR   - fatal compile-time errors\n";
	stream << "; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)\n";
	stream << "; E_USER_ERROR      - user-generated error message\n";
	stream << "; E_USER_WARNING    - user-generated warning message\n";
	stream << "; E_USER_NOTICE     - user-generated notice message\n";
	stream << "; E_DEPRECATED      - warn about code that will not work in future versions\n";
	stream << ";                     of PHP\n";
	stream << "; E_USER_DEPRECATED - user-generated deprecation warnings\n";
	stream << ";\n";
	stream << "; Common Values:\n";
	stream << ";   E_ALL (Show all errors, warnings and notices including coding standards.)\n";
	stream << ";   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\n";
	stream << ";   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)\n";
	stream << ";   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\n";
	stream << "; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\n";
	stream << "; Development Value: E_ALL\n";
	stream << "; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\n";
	stream << "; http://php.net/error-reporting\n";
	stream << "error_reporting = E_ALL\n";
	stream << "\n";
	stream << "; This directive controls whether or not and where PHP will output errors,\n";
	stream << "; notices and warnings too. Error output is very useful during development, but\n";
	stream << "; it could be very dangerous in production environments. Depending on the code\n";
	stream << "; which is triggering the error, sensitive information could potentially leak\n";
	stream << "; out of your application such as database usernames and passwords or worse.\n";
	stream << "; It's recommended that errors be logged on production servers rather than\n";
	stream << "; having the errors sent to STDOUT.\n";
	stream << "; Possible Values:\n";
	stream << ";   Off = Do not display any errors\n";
	stream << ";   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)\n";
	stream << ";   On or stdout = Display errors to STDOUT\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/display-errors\n";
	stream << "display_errors = On\n";
	stream << "\n";
	stream << "; The display of errors which occur during PHP's startup sequence are handled\n";
	stream << "; separately from display_errors. PHP's default behavior is to suppress those\n";
	stream << "; errors from clients. Turning the display of startup errors on can be useful in\n";
	stream << "; debugging configuration problems. But, it's strongly recommended that you\n";
	stream << "; leave this setting off on production servers.\n";
	stream << "; Default Value: Off\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/display-startup-errors\n";
	stream << "display_startup_errors = On\n";
	stream << "\n";
	stream << "; Besides displaying errors, PHP can also log errors to locations such as a\n";
	stream << "; server-specific log, STDERR, or a location specified by the error_log\n";
	stream << "; directive found below. While errors should not be displayed on productions\n";
	stream << "; servers they should still be monitored and logging is a great way to do that.\n";
	stream << "; Default Value: Off\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: On\n";
	stream << "; http://php.net/log-errors\n";
	stream << "log_errors = On\n";
	stream << "\n";
	stream << "; Set maximum length of log_errors. In error_log information about the source is\n";
	stream << "; added. The default is 1024 and 0 allows to not apply any maximum length at all.\n";
	stream << "; http://php.net/log-errors-max-len\n";
	stream << "log_errors_max_len = 1024\n";
	stream << "\n";
	stream << "; Do not log repeated messages. Repeated errors must occur in same file on same\n";
	stream << "; line unless ignore_repeated_source is set true.\n";
	stream << "; http://php.net/ignore-repeated-errors\n";
	stream << "ignore_repeated_errors = Off\n";
	stream << "\n";
	stream << "; Ignore source of message when ignoring repeated messages. When this setting\n";
	stream << "; is On you will not log errors with repeated messages from different files or\n";
	stream << "; source lines.\n";
	stream << "; http://php.net/ignore-repeated-source\n";
	stream << "ignore_repeated_source = Off\n";
	stream << "\n";
	stream << "; If this parameter is set to Off, then memory leaks will not be shown (on\n";
	stream << "; stdout or in the log). This has only effect in a debug compile, and if\n";
	stream << "; error reporting includes E_WARNING in the allowed list\n";
	stream << "; http://php.net/report-memleaks\n";
	stream << "report_memleaks = On\n";
	stream << "\n";
	stream << "; This setting is on by default.\n";
	stream << ";report_zend_debug = 0\n";
	stream << "\n";
	stream << "; Store the last error/warning message in $php_errormsg (boolean). Setting this value\n";
	stream << "; to On can assist in debugging and is appropriate for development servers. It should\n";
	stream << "; however be disabled on production servers.\n";
	stream << "; Default Value: Off\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/track-errors\n";
	stream << "track_errors = On\n";
	stream << "\n";
	stream << "; Turn off normal error reporting and emit XML-RPC error XML\n";
	stream << "; http://php.net/xmlrpc-errors\n";
	stream << ";xmlrpc_errors = 0\n";
	stream << "\n";
	stream << "; An XML-RPC faultCode\n";
	stream << ";xmlrpc_error_number = 0\n";
	stream << "\n";
	stream << "; When PHP displays or logs an error, it has the capability of formatting the\n";
	stream << "; error message as HTML for easier reading. This directive controls whether\n";
	stream << "; the error message is formatted as HTML or not.\n";
	stream << "; Note: This directive is hardcoded to Off for the CLI SAPI\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: On\n";
	stream << "; Production value: On\n";
	stream << "; http://php.net/html-errors\n";
	stream << "html_errors = On\n";
	stream << "\n";
	stream << "; If html_errors is set to On *and* docref_root is not empty, then PHP\n";
	stream << "; produces clickable error messages that direct to a page describing the error\n";
	stream << "; or function causing the error in detail.\n";
	stream << "; You can download a copy of the PHP manual from http://php.net/docs\n";
	stream << "; and change docref_root to the base URL of your local copy including the\n";
	stream << "; leading '/'. You must also specify the file extension being used including\n";
	stream << "; the dot. PHP's default behavior is to leave these settings empty, in which\n";
	stream << "; case no links to documentation are generated.\n";
	stream << "; Note: Never use this feature for production boxes.\n";
	stream << "; http://php.net/docref-root\n";
	stream << "; Examples\n";
	stream << ";docref_root = \"/phpmanual/\"\n";
	stream << "\n";
	stream << "; http://php.net/docref-ext\n";
	stream << ";docref_ext = .html\n";
	stream << "\n";
	stream << "; String to output before an error message. PHP's default behavior is to leave\n";
	stream << "; this setting blank.\n";
	stream << "; http://php.net/error-prepend-string\n";
	stream << "; Example:\n";
	stream << ";error_prepend_string = \"<span style='color: #ff0000'>\"\n";
	stream << "\n";
	stream << "; String to output after an error message. PHP's default behavior is to leave\n";
	stream << "; this setting blank.\n";
	stream << "; http://php.net/error-append-string\n";
	stream << "; Example:\n";
	stream << ";error_append_string = \"</span>\"\n";
	stream << "\n";
	stream << "; Log errors to specified file. PHP's default behavior is to leave this value\n";
	stream << "; empty.\n";
	stream << "; http://php.net/error-log\n";
	stream << "; Example:\n";
	stream << ";error_log = php_errors.log\n";
	stream << "; Log errors to syslog (Event Log on NT, not valid in Windows 95).\n";
	stream << ";error_log = syslog\n";
	stream << "\n";
	stream << ";windows.show_crt_warning\n";
	stream << "; Default value: 0\n";
	stream << "; Development value: 0\n";
	stream << "; Production value: 0\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;\n";
	stream << "; Data Handling ;\n";
	stream << ";;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; The separator used in PHP generated URLs to separate arguments.\n";
	stream << "; PHP's default setting is \"&\".\n";
	stream << "; http://php.net/arg-separator.output\n";
	stream << "; Example:\n";
	stream << ";arg_separator.output = \"&amp;\"\n";
	stream << "\n";
	stream << "; List of separator(s) used by PHP to parse input URLs into variables.\n";
	stream << "; PHP's default setting is \"&\".\n";
	stream << "; NOTE: Every character in this directive is considered as separator!\n";
	stream << "; http://php.net/arg-separator.input\n";
	stream << "; Example:\n";
	stream << ";arg_separator.input = \";&\"\n";
	stream << "\n";
	stream << "; This directive determines which super global arrays are registered when PHP\n";
	stream << "; starts up. G,P,C,E & S are abbreviations for the following respective super\n";
	stream << "; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty\n";
	stream << "; paid for the registration of these arrays and because ENV is not as commonly\n";
	stream << "; used as the others, ENV is not recommended on productions servers. You\n";
	stream << "; can still get access to the environment variables through getenv() should you\n";
	stream << "; need to.\n";
	stream << "; Default Value: \"EGPCS\"\n";
	stream << "; Development Value: \"GPCS\"\n";
	stream << "; Production Value: \"GPCS\";\n";
	stream << "; http://php.net/variables-order\n";
	stream << "variables_order = \"GPCS\"\n";
	stream << "\n";
	stream << "; This directive determines which super global data (G,P,C,E & S) should\n";
	stream << "; be registered into the super global array REQUEST. If so, it also determines\n";
	stream << "; the order in which that data is registered. The values for this directive are\n";
	stream << "; specified in the same manner as the variables_order directive, EXCEPT one.\n";
	stream << "; Leaving this value empty will cause PHP to use the value set in the\n";
	stream << "; variables_order directive. It does not mean it will leave the super globals\n";
	stream << "; array REQUEST empty.\n";
	stream << "; Default Value: None\n";
	stream << "; Development Value: \"GP\"\n";
	stream << "; Production Value: \"GP\"\n";
	stream << "; http://php.net/request-order\n";
	stream << "request_order = \"GP\"\n";
	stream << "\n";
	stream << "; This directive determines whether PHP registers $argv & $argc each time it\n";
	stream << "; runs. $argv contains an array of all the arguments passed to PHP when a script\n";
	stream << "; is invoked. $argc contains an integer representing the number of arguments\n";
	stream << "; that were passed when the script was invoked. These arrays are extremely\n";
	stream << "; useful when running scripts from the command line. When this directive is\n";
	stream << "; enabled, registering these variables consumes CPU cycles and memory each time\n";
	stream << "; a script is executed. For performance reasons, this feature should be disabled\n";
	stream << "; on production servers.\n";
	stream << "; Note: This directive is hardcoded to On for the CLI SAPI\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: Off\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/register-argc-argv\n";
	stream << "register_argc_argv = Off\n";
	stream << "\n";
	stream << "; When enabled, the ENV, REQUEST and SERVER variables are created when they're\n";
	stream << "; first used (Just In Time) instead of when the script starts. If these\n";
	stream << "; variables are not used within a script, having this directive on will result\n";
	stream << "; in a performance gain. The PHP directive register_argc_argv must be disabled\n";
	stream << "; for this directive to have any affect.\n";
	stream << "; http://php.net/auto-globals-jit\n";
	stream << "auto_globals_jit = On\n";
	stream << "\n";
	stream << "; Whether PHP will read the POST data.\n";
	stream << "; This option is enabled by default.\n";
	stream << "; Most likely, you won't want to disable this option globally. It causes $_POST\n";
	stream << "; and $_FILES to always be empty; the only way you will be able to read the\n";
	stream << "; POST data will be through the php://input stream wrapper. This can be useful\n";
	stream << "; to proxy requests or to process the POST data in a memory efficient fashion.\n";
	stream << "; http://php.net/enable-post-data-reading\n";
	stream << ";enable_post_data_reading = Off\n";
	stream << "\n";
	stream << "; Maximum size of POST data that PHP will accept.\n";
	stream << "; Its value may be 0 to disable the limit. It is ignored if POST data reading\n";
	stream << "; is disabled through enable_post_data_reading.\n";
	stream << "; http://php.net/post-max-size\n";
	stream << "post_max_size = 8M\n";
	stream << "\n";
	stream << "; Automatically add files before PHP document.\n";
	stream << "; http://php.net/auto-prepend-file\n";
	stream << "auto_prepend_file =\n";
	stream << "\n";
	stream << "; Automatically add files after PHP document.\n";
	stream << "; http://php.net/auto-append-file\n";
	stream << "auto_append_file =\n";
	stream << "\n";
	stream << "; By default, PHP will output a character encoding using\n";
	stream << "; the Content-type: header.  To disable sending of the charset, simply\n";
	stream << "; set it to be empty.\n";
	stream << ";\n";
	stream << "; PHP's built-in default is text/html\n";
	stream << "; http://php.net/default-mimetype\n";
	stream << "default_mimetype = \"text/html\"\n";
	stream << "\n";
	stream << "; PHP's default character set is set to empty.\n";
	stream << "; http://php.net/default-charset\n";
	stream << ";default_charset = \"UTF-8\"\n";
	stream << "\n";
	stream << "; Always populate the $HTTP_RAW_POST_DATA variable. PHP's default behavior is\n";
	stream << "; to disable this feature. If post reading is disabled through\n";
	stream << "; enable_post_data_reading, $HTTP_RAW_POST_DATA is *NOT* populated.\n";
	stream << "; http://php.net/always-populate-raw-post-data\n";
	stream << ";always_populate_raw_post_data = On\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;;;;;;;\n";
	stream << "; Paths and Directories ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; UNIX: \"/path1:/path2\"\n";
	stream << ";include_path = \".:/php/includes\"\n";
	stream << ";\n";
	stream << "; Windows: \"\\path1;\\path2\"\n";
	stream << ";include_path = \".;c:\\php\\includes\"\n";
	stream << ";\n";
	stream << "; PHP's default setting for include_path is \".;/path/to/php/pear\"\n";
	stream << "; http://php.net/include-path\n";
	stream << "\n";
	stream << "; The root of the PHP pages, used only if nonempty.\n";
	stream << "; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root\n";
	stream << "; if you are running php as a CGI under any web server (other than IIS)\n";
	stream << "; see documentation for security issues.  The alternate is to use the\n";
	stream << "; cgi.force_redirect configuration below\n";
	stream << "; http://php.net/doc-root\n";
	stream << "doc_root =\n";
	stream << "\n";
	stream << "; The directory under which PHP opens the script using /~username used only\n";
	stream << "; if nonempty.\n";
	stream << "; http://php.net/user-dir\n";
	stream << "user_dir =\n";
	stream << "\n";
	stream << "; Directory in which the loadable extensions (modules) reside.\n";
	stream << "; http://php.net/extension-dir\n";
	stream << "; extension_dir = \"./\"\n";
	stream << "; On windows:\n";
	stream << "; extension_dir = \"ext\"\n";
	stream << "\n";
	stream << "; Whether or not to enable the dl() function.  The dl() function does NOT work\n";
	stream << "; properly in multithreaded servers, such as IIS or Zeus, and is automatically\n";
	stream << "; disabled on them.\n";
	stream << "; http://php.net/enable-dl\n";
	stream << "enable_dl = Off\n";
	stream << "\n";
	stream << "; cgi.force_redirect is necessary to provide security running PHP as a CGI under\n";
	stream << "; most web servers.  Left undefined, PHP turns this on by default.  You can\n";
	stream << "; turn it off here AT YOUR OWN RISK\n";
	stream << "; **You CAN safely turn this off for IIS, in fact, you MUST.**\n";
	stream << "; http://php.net/cgi.force-redirect\n";
	stream << ";cgi.force_redirect = 1\n";
	stream << "\n";
	stream << "; if cgi.nph is enabled it will force cgi to always sent Status: 200 with\n";
	stream << "; every request. PHP's default behavior is to disable this feature.\n";
	stream << ";cgi.nph = 1\n";
	stream << "\n";
	stream << "; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape\n";
	stream << "; (iPlanet) web servers, you MAY need to set an environment variable name that PHP\n";
	stream << "; will look for to know it is OK to continue execution.  Setting this variable MAY\n";
	stream << "; cause security issues, KNOW WHAT YOU ARE DOING FIRST.\n";
	stream << "; http://php.net/cgi.redirect-status-env\n";
	stream << ";cgi.redirect_status_env = \n";
	stream << "\n";
	stream << "; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\n";
	stream << "; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\n";
	stream << "; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\n";
	stream << "; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\n";
	stream << "; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\n";
	stream << "; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\n";
	stream << "; http://php.net/cgi.fix-pathinfo\n";
	stream << ";cgi.fix_pathinfo=1\n";
	stream << "\n";
	stream << "; FastCGI under IIS (on WINNT based OS) supports the ability to impersonate\n";
	stream << "; security tokens of the calling client.  This allows IIS to define the\n";
	stream << "; security context that the request runs under.  mod_fastcgi under Apache\n";
	stream << "; does not currently support this feature (03/17/2002)\n";
	stream << "; Set to 1 if running under IIS.  Default is zero.\n";
	stream << "; http://php.net/fastcgi.impersonate\n";
	stream << ";fastcgi.impersonate = 1\n";
	stream << "\n";
	stream << "; Disable logging through FastCGI connection. PHP's default behavior is to enable\n";
	stream << "; this feature.\n";
	stream << ";fastcgi.logging = 0\n";
	stream << "\n";
	stream << "; cgi.rfc2616_headers configuration option tells PHP what type of headers to\n";
	stream << "; use when sending HTTP response code. If it's set 0 PHP sends Status: header that\n";
	stream << "; is supported by Apache. When this option is set to 1 PHP will send\n";
	stream << "; RFC2616 compliant header.\n";
	stream << "; Default is zero.\n";
	stream << "; http://php.net/cgi.rfc2616-headers\n";
	stream << ";cgi.rfc2616_headers = 0\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;\n";
	stream << "; File Uploads ;\n";
	stream << ";;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; Whether to allow HTTP file uploads.\n";
	stream << "; http://php.net/file-uploads\n";
	stream << "file_uploads = On\n";
	stream << "\n";
	stream << "; Temporary directory for HTTP uploaded files (will use system default if not\n";
	stream << "; specified).\n";
	stream << "; http://php.net/upload-tmp-dir\n";
	stream << ";upload_tmp_dir =\n";
	stream << "\n";
	stream << "; Maximum allowed size for uploaded files.\n";
	stream << "; http://php.net/upload-max-filesize\n";
	stream << "upload_max_filesize = 2M\n";
	stream << "\n";
	stream << "; Maximum number of files that can be uploaded via a single request\n";
	stream << "max_file_uploads = 20\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;\n";
	stream << "; Fopen wrappers ;\n";
	stream << ";;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; Whether to allow the treatment of URLs (like http:// or ftp://) as files.\n";
	stream << "; http://php.net/allow-url-fopen\n";
	stream << "allow_url_fopen = On\n";
	stream << "\n";
	stream << "; Whether to allow include/require to open URLs (like http:// or ftp://) as files.\n";
	stream << "; http://php.net/allow-url-include\n";
	stream << "allow_url_include = Off\n";
	stream << "\n";
	stream << "; Define the anonymous ftp password (your email address). PHP's default setting\n";
	stream << "; for this is empty.\n";
	stream << "; http://php.net/from\n";
	stream << ";from=\"john@doe.com\"\n";
	stream << "\n";
	stream << "; Define the User-Agent string. PHP's default setting for this is empty.\n";
	stream << "; http://php.net/user-agent\n";
	stream << ";user_agent=\"PHP\"\n";
	stream << "\n";
	stream << "; Default timeout for socket based streams (seconds)\n";
	stream << "; http://php.net/default-socket-timeout\n";
	stream << "default_socket_timeout = 60\n";
	stream << "\n";
	stream << "; If your scripts have to deal with files from Macintosh systems,\n";
	stream << "; or you are running on a Mac and need to deal with files from\n";
	stream << "; unix or win32 systems, setting this flag will cause PHP to\n";
	stream << "; automatically detect the EOL character in those files so that\n";
	stream << "; fgets() and file() will work regardless of the source of the file.\n";
	stream << "; http://php.net/auto-detect-line-endings\n";
	stream << ";auto_detect_line_endings = Off\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;;;;\n";
	stream << "; Dynamic Extensions ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "; If you wish to have an extension loaded automatically, use the following\n";
	stream << "; syntax:\n";
	stream << ";\n";
	stream << ";   extension=modulename.extension\n";
	stream << ";\n";
	stream << "; For example, on Windows:\n";
	stream << ";\n";
	stream << ";   extension=msql.dll\n";
	stream << ";\n";
	stream << "; ... or under UNIX:\n";
	stream << ";\n";
	stream << ";   extension=msql.so\n";
	stream << ";\n";
	stream << "; ... or with a path:\n";
	stream << ";\n";
	stream << ";   extension=/path/to/extension/msql.so\n";
	stream << ";\n";
	stream << "; If you only provide the name of the extension, PHP will look for it in its\n";
	stream << "; default extension directory.\n";
	stream << ";\n";
	stream << "; Windows Extensions\n";
	stream << "; Note that ODBC support is built in, so no dll is needed for it.\n";
	stream << "; Note that many DLL files are located in the extensions/ (PHP 4) ext/ (PHP 5)\n";
	stream << "; extension folders as well as the separate PECL DLL download (PHP 5).\n";
	stream << "; Be sure to appropriately set the extension_dir directive.\n";
	stream << ";\n";
	stream << "\n";
	stream << "extension_dir=\"C:/Documents and Settings/Administrator/My Documents/Downloads/httphp/php/ext\"\n";
	stream << ";extension=php_bz2.dll\n";
	stream << ";extension=php_curl.dll\n";
	stream << ";extension=php_fileinfo.dll\n";
	stream << "extension=php_gd2.dll\n";
	stream << ";extension=php_gettext.dll\n";
	stream << ";extension=php_gmp.dll\n";
	stream << ";extension=php_intl.dll\n";
	stream << "extension=php_imap.dll\n";
	stream << ";extension=php_interbase.dll\n";
	stream << ";extension=php_ldap.dll\n";
	stream << ";extension=php_mbstring.dll\n";
	stream << ";extension=php_exif.dll      ; Must be after mbstring as it depends on it\n";
	stream << "extension=php_mysql.dll\n";
	stream << "extension=php_mysqli.dll\n";
	stream << ";extension=php_oci8.dll      ; Use with Oracle 10gR2 Instant Client\n";
	stream << ";extension=php_oci8_11g.dll  ; Use with Oracle 11gR2 Instant Client\n";
	stream << ";extension=php_openssl.dll\n";
	stream << ";extension=php_pdo_firebird.dll\n";
	stream << "extension=php_pdo_mysql.dll\n";
	stream << ";extension=php_pdo_oci.dll\n";
	stream << ";extension=php_pdo_odbc.dll\n";
	stream << ";extension=php_pdo_pgsql.dll\n";
	stream << "extension=php_pdo_sqlite.dll\n";
	stream << ";extension=php_pgsql.dll\n";
	stream << ";extension=php_pspell.dll\n";
	stream << ";extension=php_shmop.dll\n";
	stream << "\n";
	stream << "; The MIBS data available in the PHP distribution must be installed. \n";
	stream << "; See http://www.php.net/manual/en/snmp.installation.php \n";
	stream << ";extension=php_snmp.dll\n";
	stream << "\n";
	stream << ";extension=php_soap.dll\n";
	stream << ";extension=php_sockets.dll\n";
	stream << "extension=php_sqlite3.dll\n";
	stream << ";extension=php_sybase_ct.dll\n";
	stream << ";extension=php_tidy.dll\n";
    stream << "zend_extension=php_xdebug-2.2.3-5.5-vc11.dll\n";
	stream << ";extension=php_xmlrpc.dll\n";
	stream << ";extension=php_xsl.dll\n";
	stream << ";extension=php_zip.dll\n";
	stream << "\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "; Module Settings ;\n";
	stream << ";;;;;;;;;;;;;;;;;;;\n";
	stream << "\n";
	stream << "[CLI Server]\n";
	stream << "; Whether the CLI web server uses ANSI color coding in its terminal output.\n";
	stream << "cli_server.color = On\n";
	stream << "\n";
	stream << "[Date]\n";
	stream << "; Defines the default timezone used by the date functions\n";
	stream << "; http://php.net/date.timezone\n";
    stream << "date.timezone = \"Europe/Amsterdam\"\n";
	stream << "\n";
	stream << "; http://php.net/date.default-latitude\n";
	stream << ";date.default_latitude = 31.7667\n";
	stream << "\n";
	stream << "; http://php.net/date.default-longitude\n";
	stream << ";date.default_longitude = 35.2333\n";
	stream << "\n";
	stream << "; http://php.net/date.sunrise-zenith\n";
	stream << ";date.sunrise_zenith = 90.583333\n";
	stream << "\n";
	stream << "; http://php.net/date.sunset-zenith\n";
	stream << ";date.sunset_zenith = 90.583333\n";
	stream << "\n";
	stream << "[filter]\n";
	stream << "; http://php.net/filter.default\n";
	stream << ";filter.default = unsafe_raw\n";
	stream << "\n";
	stream << "; http://php.net/filter.default-flags\n";
	stream << ";filter.default_flags =\n";
	stream << "\n";
	stream << "[iconv]\n";
	stream << ";iconv.input_encoding = ISO-8859-1\n";
	stream << ";iconv.internal_encoding = ISO-8859-1\n";
	stream << ";iconv.output_encoding = ISO-8859-1\n";
	stream << "\n";
	stream << "[intl]\n";
	stream << ";intl.default_locale =\n";
	stream << "; This directive allows you to produce PHP errors when some error\n";
	stream << "; happens within intl functions. The value is the level of the error produced.\n";
	stream << "; Default is 0, which does not produce any errors.\n";
	stream << ";intl.error_level = E_WARNING\n";
	stream << "\n";
	stream << "[sqlite]\n";
	stream << "; http://php.net/sqlite.assoc-case\n";
	stream << ";sqlite.assoc_case = 0\n";
	stream << "\n";
	stream << "[sqlite3]\n";
	stream << ";sqlite3.extension_dir =\n";
	stream << "\n";
	stream << "[Pcre]\n";
	stream << ";PCRE library backtracking limit.\n";
	stream << "; http://php.net/pcre.backtrack-limit\n";
	stream << ";pcre.backtrack_limit=100000\n";
	stream << "\n";
	stream << ";PCRE library recursion limit.\n";
	stream << ";Please note that if you set this value to a high number you may consume all\n";
	stream << ";the available process stack and eventually crash PHP (due to reaching the\n";
	stream << ";stack size limit imposed by the Operating System).\n";
	stream << "; http://php.net/pcre.recursion-limit\n";
	stream << ";pcre.recursion_limit=100000\n";
	stream << "\n";
	stream << "[Pdo]\n";
	stream << "; Whether to pool ODBC connections. Can be one of \"strict\", \"relaxed\" or \"off\"\n";
	stream << "; http://php.net/pdo-odbc.connection-pooling\n";
	stream << ";pdo_odbc.connection_pooling=strict\n";
	stream << "\n";
	stream << ";pdo_odbc.db2_instance_name\n";
	stream << "\n";
	stream << "[Pdo_mysql]\n";
	stream << "; If mysqlnd is used: Number of cache slots for the internal result set cache\n";
	stream << "; http://php.net/pdo_mysql.cache_size\n";
	stream << "pdo_mysql.cache_size = 2000\n";
	stream << "\n";
	stream << "; Default socket name for local MySQL connects.  If empty, uses the built-in\n";
	stream << "; MySQL defaults.\n";
	stream << "; http://php.net/pdo_mysql.default-socket\n";
	stream << "pdo_mysql.default_socket=\n";
	stream << "\n";
	stream << "[Phar]\n";
	stream << "; http://php.net/phar.readonly\n";
	stream << ";phar.readonly = On\n";
	stream << "\n";
	stream << "; http://php.net/phar.require-hash\n";
	stream << ";phar.require_hash = On\n";
	stream << "\n";
	stream << ";phar.cache_list =\n";
	stream << "\n";
	stream << "[mail function]\n";
	stream << "; For Win32 only.\n";
	stream << "; http://php.net/smtp\n";
	stream << "SMTP = localhost\n";
	stream << "; http://php.net/smtp-port\n";
	stream << "smtp_port = 25\n";
	stream << "\n";
	stream << "; For Win32 only.\n";
	stream << "; http://php.net/sendmail-from\n";
	stream << ";sendmail_from = me@example.com\n";
	stream << "\n";
	stream << "; For Unix only.  You may supply arguments as well (default: \"sendmail -t -i\").\n";
	stream << "; http://php.net/sendmail-path\n";
	stream << ";sendmail_path =\n";
	stream << "\n";
	stream << "; Force the addition of the specified parameters to be passed as extra parameters\n";
	stream << "; to the sendmail binary. These parameters will always replace the value of\n";
	stream << "; the 5th parameter to mail(), even in safe mode.\n";
	stream << ";mail.force_extra_parameters =\n";
	stream << "\n";
	stream << "; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename\n";
	stream << "mail.add_x_header = On\n";
	stream << "\n";
	stream << "; The path to a log file that will log all mail() calls. Log entries include\n";
	stream << "; the full path of the script, line number, To address and headers.\n";
	stream << ";mail.log =\n";
	stream << "; Log mail to syslog (Event Log on NT, not valid in Windows 95).\n";
	stream << ";mail.log = syslog\n";
	stream << "\n";
	stream << "[SQL]\n";
	stream << "; http://php.net/sql.safe-mode\n";
	stream << "sql.safe_mode = Off\n";
	stream << "\n";
	stream << "[ODBC]\n";
	stream << "; http://php.net/odbc.default-db\n";
	stream << ";odbc.default_db    =  Not yet implemented\n";
	stream << "\n";
	stream << "; http://php.net/odbc.default-user\n";
	stream << ";odbc.default_user  =  Not yet implemented\n";
	stream << "\n";
	stream << "; http://php.net/odbc.default-pw\n";
	stream << ";odbc.default_pw    =  Not yet implemented\n";
	stream << "\n";
	stream << "; Controls the ODBC cursor model.\n";
	stream << "; Default: SQL_CURSOR_STATIC (default).\n";
	stream << ";odbc.default_cursortype\n";
	stream << "\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "; http://php.net/odbc.allow-persistent\n";
	stream << "odbc.allow_persistent = On\n";
	stream << "\n";
	stream << "; Check that a connection is still valid before reuse.\n";
	stream << "; http://php.net/odbc.check-persistent\n";
	stream << "odbc.check_persistent = On\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "; http://php.net/odbc.max-persistent\n";
	stream << "odbc.max_persistent = -1\n";
	stream << "\n";
	stream << "; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n";
	stream << "; http://php.net/odbc.max-links\n";
	stream << "odbc.max_links = -1\n";
	stream << "\n";
	stream << "; Handling of LONG fields.  Returns number of bytes to variables.  0 means\n";
	stream << "; passthru.\n";
	stream << "; http://php.net/odbc.defaultlrl\n";
	stream << "odbc.defaultlrl = 4096\n";
	stream << "\n";
	stream << "; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.\n";
	stream << "; See the documentation on odbc_binmode and odbc_longreadlen for an explanation\n";
	stream << "; of odbc.defaultlrl and odbc.defaultbinmode\n";
	stream << "; http://php.net/odbc.defaultbinmode\n";
	stream << "odbc.defaultbinmode = 1\n";
	stream << "\n";
	stream << ";birdstep.max_links = -1\n";
	stream << "\n";
	stream << "[Interbase]\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "ibase.allow_persistent = 1\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "ibase.max_persistent = -1\n";
	stream << "\n";
	stream << "; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n";
	stream << "ibase.max_links = -1\n";
	stream << "\n";
	stream << "; Default database name for ibase_connect().\n";
	stream << ";ibase.default_db =\n";
	stream << "\n";
	stream << "; Default username for ibase_connect().\n";
	stream << ";ibase.default_user =\n";
	stream << "\n";
	stream << "; Default password for ibase_connect().\n";
	stream << ";ibase.default_password =\n";
	stream << "\n";
	stream << "; Default charset for ibase_connect().\n";
	stream << ";ibase.default_charset =\n";
	stream << "\n";
	stream << "; Default timestamp format.\n";
	stream << "ibase.timestampformat = \"%Y-%m-%d %H:%M:%S\"\n";
	stream << "\n";
	stream << "; Default date format.\n";
	stream << "ibase.dateformat = \"%Y-%m-%d\"\n";
	stream << "\n";
	stream << "; Default time format.\n";
	stream << "ibase.timeformat = \"%H:%M:%S\"\n";
	stream << "\n";
	stream << "[MySQL]\n";
	stream << "; Allow accessing, from PHP's perspective, local files with LOAD DATA statements\n";
	stream << "; http://php.net/mysql.allow_local_infile\n";
	stream << "mysql.allow_local_infile = On\n";
	stream << "\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "; http://php.net/mysql.allow-persistent\n";
	stream << "mysql.allow_persistent = On\n";
	stream << "\n";
	stream << "; If mysqlnd is used: Number of cache slots for the internal result set cache\n";
	stream << "; http://php.net/mysql.cache_size\n";
	stream << "mysql.cache_size = 2000\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "; http://php.net/mysql.max-persistent\n";
	stream << "mysql.max_persistent = -1\n";
	stream << "\n";
	stream << "; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n";
	stream << "; http://php.net/mysql.max-links\n";
	stream << "mysql.max_links = -1\n";
	stream << "\n";
	stream << "; Default port number for mysql_connect().  If unset, mysql_connect() will use\n";
	stream << "; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the\n";
	stream << "; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look\n";
	stream << "; at MYSQL_PORT.\n";
	stream << "; http://php.net/mysql.default-port\n";
	stream << "mysql.default_port =\n";
	stream << "\n";
	stream << "; Default socket name for local MySQL connects.  If empty, uses the built-in\n";
	stream << "; MySQL defaults.\n";
	stream << "; http://php.net/mysql.default-socket\n";
	stream << "mysql.default_socket =\n";
	stream << "\n";
	stream << "; Default host for mysql_connect() (doesn't apply in safe mode).\n";
	stream << "; http://php.net/mysql.default-host\n";
	stream << "mysql.default_host =\n";
	stream << "\n";
	stream << "; Default user for mysql_connect() (doesn't apply in safe mode).\n";
	stream << "; http://php.net/mysql.default-user\n";
	stream << "mysql.default_user =\n";
	stream << "\n";
	stream << "; Default password for mysql_connect() (doesn't apply in safe mode).\n";
	stream << "; Note that this is generally a *bad* idea to store passwords in this file.\n";
	stream << "; *Any* user with PHP access can run 'echo get_cfg_var(\"mysql.default_password\")\n";
	stream << "; and reveal this password!  And of course, any users with read access to this\n";
	stream << "; file will be able to reveal the password as well.\n";
	stream << "; http://php.net/mysql.default-password\n";
	stream << "mysql.default_password =\n";
	stream << "\n";
	stream << "; Maximum time (in seconds) for connect timeout. -1 means no limit\n";
	stream << "; http://php.net/mysql.connect-timeout\n";
	stream << "mysql.connect_timeout = 60\n";
	stream << "\n";
	stream << "; Trace mode. When trace_mode is active (=On), warnings for table/index scans and\n";
	stream << "; SQL-Errors will be displayed.\n";
	stream << "; http://php.net/mysql.trace-mode\n";
	stream << "mysql.trace_mode = Off\n";
	stream << "\n";
	stream << "[MySQLi]\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "; http://php.net/mysqli.max-persistent\n";
	stream << "mysqli.max_persistent = -1\n";
	stream << "\n";
	stream << "; Allow accessing, from PHP's perspective, local files with LOAD DATA statements\n";
	stream << "; http://php.net/mysqli.allow_local_infile\n";
	stream << ";mysqli.allow_local_infile = On\n";
	stream << "\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "; http://php.net/mysqli.allow-persistent\n";
	stream << "mysqli.allow_persistent = On\n";
	stream << "\n";
	stream << "; Maximum number of links.  -1 means no limit.\n";
	stream << "; http://php.net/mysqli.max-links\n";
	stream << "mysqli.max_links = -1\n";
	stream << "\n";
	stream << "; If mysqlnd is used: Number of cache slots for the internal result set cache\n";
	stream << "; http://php.net/mysqli.cache_size\n";
	stream << "mysqli.cache_size = 2000\n";
	stream << "\n";
	stream << "; Default port number for mysqli_connect().  If unset, mysqli_connect() will use\n";
	stream << "; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the\n";
	stream << "; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look\n";
	stream << "; at MYSQL_PORT.\n";
	stream << "; http://php.net/mysqli.default-port\n";
	stream << "mysqli.default_port = 3306\n";
	stream << "\n";
	stream << "; Default socket name for local MySQL connects.  If empty, uses the built-in\n";
	stream << "; MySQL defaults.\n";
	stream << "; http://php.net/mysqli.default-socket\n";
	stream << "mysqli.default_socket =\n";
	stream << "\n";
	stream << "; Default host for mysql_connect() (doesn't apply in safe mode).\n";
	stream << "; http://php.net/mysqli.default-host\n";
	stream << "mysqli.default_host =\n";
	stream << "\n";
	stream << "; Default user for mysql_connect() (doesn't apply in safe mode).\n";
	stream << "; http://php.net/mysqli.default-user\n";
	stream << "mysqli.default_user =\n";
	stream << "\n";
	stream << "; Default password for mysqli_connect() (doesn't apply in safe mode).\n";
	stream << "; Note that this is generally a *bad* idea to store passwords in this file.\n";
	stream << "; *Any* user with PHP access can run 'echo get_cfg_var(\"mysqli.default_pw\")\n";
	stream << "; and reveal this password!  And of course, any users with read access to this\n";
	stream << "; file will be able to reveal the password as well.\n";
	stream << "; http://php.net/mysqli.default-pw\n";
	stream << "mysqli.default_pw =\n";
	stream << "\n";
	stream << "; Allow or prevent reconnect\n";
	stream << "mysqli.reconnect = Off\n";
	stream << "\n";
	stream << "[mysqlnd]\n";
	stream << "; Enable / Disable collection of general statistics by mysqlnd which can be\n";
	stream << "; used to tune and monitor MySQL operations.\n";
	stream << "; http://php.net/mysqlnd.collect_statistics\n";
	stream << "mysqlnd.collect_statistics = On\n";
	stream << "\n";
	stream << "; Enable / Disable collection of memory usage statistics by mysqlnd which can be\n";
	stream << "; used to tune and monitor MySQL operations.\n";
	stream << "; http://php.net/mysqlnd.collect_memory_statistics\n";
	stream << "mysqlnd.collect_memory_statistics = On\n";
	stream << "\n";
	stream << "; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.\n";
	stream << "; http://php.net/mysqlnd.net_cmd_buffer_size\n";
	stream << ";mysqlnd.net_cmd_buffer_size = 2048\n";
	stream << "\n";
	stream << "; Size of a pre-allocated buffer used for reading data sent by the server in\n";
	stream << "; bytes.\n";
	stream << "; http://php.net/mysqlnd.net_read_buffer_size\n";
	stream << ";mysqlnd.net_read_buffer_size = 32768\n";
	stream << "\n";
	stream << "[OCI8]\n";
	stream << "\n";
	stream << "; Connection: Enables privileged connections using external\n";
	stream << "; credentials (OCI_SYSOPER, OCI_SYSDBA)\n";
	stream << "; http://php.net/oci8.privileged-connect\n";
	stream << ";oci8.privileged_connect = Off\n";
	stream << "\n";
	stream << "; Connection: The maximum number of persistent OCI8 connections per\n";
	stream << "; process. Using -1 means no limit.\n";
	stream << "; http://php.net/oci8.max-persistent\n";
	stream << ";oci8.max_persistent = -1\n";
	stream << "\n";
	stream << "; Connection: The maximum number of seconds a process is allowed to\n";
	stream << "; maintain an idle persistent connection. Using -1 means idle\n";
	stream << "; persistent connections will be maintained forever.\n";
	stream << "; http://php.net/oci8.persistent-timeout\n";
	stream << ";oci8.persistent_timeout = -1\n";
	stream << "\n";
	stream << "; Connection: The number of seconds that must pass before issuing a\n";
	stream << "; ping during oci_pconnect() to check the connection validity. When\n";
	stream << "; set to 0, each oci_pconnect() will cause a ping. Using -1 disables\n";
	stream << "; pings completely.\n";
	stream << "; http://php.net/oci8.ping-interval\n";
	stream << ";oci8.ping_interval = 60\n";
	stream << "\n";
	stream << "; Connection: Set this to a user chosen connection class to be used\n";
	stream << "; for all pooled server requests with Oracle 11g Database Resident\n";
	stream << "; Connection Pooling (DRCP).  To use DRCP, this value should be set to\n";
	stream << "; the same string for all web servers running the same application,\n";
	stream << "; the database pool must be configured, and the connection string must\n";
	stream << "; specify to use a pooled server.\n";
	stream << ";oci8.connection_class =\n";
	stream << "\n";
	stream << "; High Availability: Using On lets PHP receive Fast Application\n";
	stream << "; Notification (FAN) events generated when a database node fails. The\n";
	stream << "; database must also be configured to post FAN events.\n";
	stream << ";oci8.events = Off\n";
	stream << "\n";
	stream << "; Tuning: This option enables statement caching, and specifies how\n";
	stream << "; many statements to cache. Using 0 disables statement caching.\n";
	stream << "; http://php.net/oci8.statement-cache-size\n";
	stream << ";oci8.statement_cache_size = 20\n";
	stream << "\n";
	stream << "; Tuning: Enables statement prefetching and sets the default number of\n";
	stream << "; rows that will be fetched automatically after statement execution.\n";
	stream << "; http://php.net/oci8.default-prefetch\n";
	stream << ";oci8.default_prefetch = 100\n";
	stream << "\n";
	stream << "; Compatibility. Using On means oci_close() will not close\n";
	stream << "; oci_connect() and oci_new_connect() connections.\n";
	stream << "; http://php.net/oci8.old-oci-close-semantics\n";
	stream << ";oci8.old_oci_close_semantics = Off\n";
	stream << "\n";
	stream << "[PostgreSQL]\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "; http://php.net/pgsql.allow-persistent\n";
	stream << "pgsql.allow_persistent = On\n";
	stream << "\n";
	stream << "; Detect broken persistent links always with pg_pconnect().\n";
	stream << "; Auto reset feature requires a little overheads.\n";
	stream << "; http://php.net/pgsql.auto-reset-persistent\n";
	stream << "pgsql.auto_reset_persistent = Off\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "; http://php.net/pgsql.max-persistent\n";
	stream << "pgsql.max_persistent = -1\n";
	stream << "\n";
	stream << "; Maximum number of links (persistent+non persistent).  -1 means no limit.\n";
	stream << "; http://php.net/pgsql.max-links\n";
	stream << "pgsql.max_links = -1\n";
	stream << "\n";
	stream << "; Ignore PostgreSQL backends Notice message or not.\n";
	stream << "; Notice message logging require a little overheads.\n";
	stream << "; http://php.net/pgsql.ignore-notice\n";
	stream << "pgsql.ignore_notice = 0\n";
	stream << "\n";
	stream << "; Log PostgreSQL backends Notice message or not.\n";
	stream << "; Unless pgsql.ignore_notice=0, module cannot log notice message.\n";
	stream << "; http://php.net/pgsql.log-notice\n";
	stream << "pgsql.log_notice = 0\n";
	stream << "\n";
	stream << "[Sybase-CT]\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "; http://php.net/sybct.allow-persistent\n";
	stream << "sybct.allow_persistent = On\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "; http://php.net/sybct.max-persistent\n";
	stream << "sybct.max_persistent = -1\n";
	stream << "\n";
	stream << "; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n";
	stream << "; http://php.net/sybct.max-links\n";
	stream << "sybct.max_links = -1\n";
	stream << "\n";
	stream << "; Minimum server message severity to display.\n";
	stream << "; http://php.net/sybct.min-server-severity\n";
	stream << "sybct.min_server_severity = 10\n";
	stream << "\n";
	stream << "; Minimum client message severity to display.\n";
	stream << "; http://php.net/sybct.min-client-severity\n";
	stream << "sybct.min_client_severity = 10\n";
	stream << "\n";
	stream << "; Set per-context timeout\n";
	stream << "; http://php.net/sybct.timeout\n";
	stream << ";sybct.timeout=\n";
	stream << "\n";
	stream << ";sybct.packet_size\n";
	stream << "\n";
	stream << "; The maximum time in seconds to wait for a connection attempt to succeed before returning failure.\n";
	stream << "; Default: one minute\n";
	stream << ";sybct.login_timeout=\n";
	stream << "\n";
	stream << "; The name of the host you claim to be connecting from, for display by sp_who.\n";
	stream << "; Default: none\n";
	stream << ";sybct.hostname=\n";
	stream << "\n";
	stream << "; Allows you to define how often deadlocks are to be retried. -1 means \"forever\".\n";
	stream << "; Default: 0\n";
	stream << ";sybct.deadlock_retry_count=\n";
	stream << "\n";
	stream << "[bcmath]\n";
	stream << "; Number of decimal digits for all bcmath functions.\n";
	stream << "; http://php.net/bcmath.scale\n";
	stream << "bcmath.scale = 0\n";
	stream << "\n";
	stream << "[browscap]\n";
	stream << "; http://php.net/browscap\n";
	stream << ";browscap = extra/browscap.ini\n";
	stream << "\n";
	stream << "[Session]\n";
	stream << "; Handler used to store/retrieve data.\n";
	stream << "; http://php.net/session.save-handler\n";
	stream << "session.save_handler = files\n";
	stream << "\n";
	stream << "; Argument passed to save_handler.  In the case of files, this is the path\n";
	stream << "; where data files are stored. Note: Windows users have to change this\n";
	stream << "; variable in order to use PHP's session functions.\n";
	stream << ";\n";
	stream << "; The path can be defined as:\n";
	stream << ";\n";
	stream << ";     session.save_path = \"N;/path\"\n";
	stream << ";\n";
	stream << "; where N is an integer.  Instead of storing all the session files in\n";
	stream << "; /path, what this will do is use subdirectories N-levels deep, and\n";
	stream << "; store the session data in those directories.  This is useful if you\n";
	stream << "; or your OS have problems with lots of files in one directory, and is\n";
	stream << "; a more efficient layout for servers that handle lots of sessions.\n";
	stream << ";\n";
	stream << "; NOTE 1: PHP will not create this directory structure automatically.\n";
	stream << ";         You can use the script in the ext/session dir for that purpose.\n";
	stream << "; NOTE 2: See the section on garbage collection below if you choose to\n";
	stream << ";         use subdirectories for session storage\n";
	stream << ";\n";
	stream << "; The file storage module creates files using mode 600 by default.\n";
	stream << "; You can change that by using\n";
	stream << ";\n";
	stream << ";     session.save_path = \"N;MODE;/path\"\n";
	stream << ";\n";
	stream << "; where MODE is the octal representation of the mode. Note that this\n";
	stream << "; does not overwrite the process's umask.\n";
	stream << "; http://php.net/session.save-path\n";
	stream << ";session.save_path = \"/tmp\"\n";
	stream << "\n";
	stream << "; Whether to use cookies.\n";
	stream << "; http://php.net/session.use-cookies\n";
	stream << "session.use_cookies = 1\n";
	stream << "\n";
	stream << "; http://php.net/session.cookie-secure\n";
	stream << ";session.cookie_secure =\n";
	stream << "\n";
	stream << "; This option forces PHP to fetch and use a cookie for storing and maintaining\n";
	stream << "; the session id. We encourage this operation as it's very helpful in combating\n";
	stream << "; session hijacking when not specifying and managing your own session id. It is\n";
	stream << "; not the end all be all of session hijacking defense, but it's a good start.\n";
	stream << "; http://php.net/session.use-only-cookies\n";
	stream << "session.use_only_cookies = 1\n";
	stream << "\n";
	stream << "; Name of the session (used as cookie name).\n";
	stream << "; http://php.net/session.name\n";
	stream << "session.name = PHPSESSID\n";
	stream << "\n";
	stream << "; Initialize session on request startup.\n";
	stream << "; http://php.net/session.auto-start\n";
	stream << "session.auto_start = 0\n";
	stream << "\n";
	stream << "; Lifetime in seconds of cookie or, if 0, until browser is restarted.\n";
	stream << "; http://php.net/session.cookie-lifetime\n";
	stream << "session.cookie_lifetime = 0\n";
	stream << "\n";
	stream << "; The path for which the cookie is valid.\n";
	stream << "; http://php.net/session.cookie-path\n";
	stream << "session.cookie_path = /\n";
	stream << "\n";
	stream << "; The domain for which the cookie is valid.\n";
	stream << "; http://php.net/session.cookie-domain\n";
	stream << "session.cookie_domain =\n";
	stream << "\n";
	stream << "; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.\n";
	stream << "; http://php.net/session.cookie-httponly\n";
	stream << "session.cookie_httponly =\n";
	stream << "\n";
	stream << "; Handler used to serialize data.  php is the standard serializer of PHP.\n";
	stream << "; http://php.net/session.serialize-handler\n";
	stream << "session.serialize_handler = php\n";
	stream << "\n";
	stream << "; Defines the probability that the 'garbage collection' process is started\n";
	stream << "; on every session initialization. The probability is calculated by using\n";
	stream << "; gc_probability/gc_divisor. Where session.gc_probability is the numerator\n";
	stream << "; and gc_divisor is the denominator in the equation. Setting this value to 1\n";
	stream << "; when the session.gc_divisor value is 100 will give you approximately a 1% chance\n";
	stream << "; the gc will run on any give request.\n";
	stream << "; Default Value: 1\n";
	stream << "; Development Value: 1\n";
	stream << "; Production Value: 1\n";
	stream << "; http://php.net/session.gc-probability\n";
	stream << "session.gc_probability = 1\n";
	stream << "\n";
	stream << "; Defines the probability that the 'garbage collection' process is started on every\n";
	stream << "; session initialization. The probability is calculated by using the following equation:\n";
	stream << "; gc_probability/gc_divisor. Where session.gc_probability is the numerator and\n";
	stream << "; session.gc_divisor is the denominator in the equation. Setting this value to 1\n";
	stream << "; when the session.gc_divisor value is 100 will give you approximately a 1% chance\n";
	stream << "; the gc will run on any give request. Increasing this value to 1000 will give you\n";
	stream << "; a 0.1% chance the gc will run on any give request. For high volume production servers,\n";
	stream << "; this is a more efficient approach.\n";
	stream << "; Default Value: 100\n";
	stream << "; Development Value: 1000\n";
	stream << "; Production Value: 1000\n";
	stream << "; http://php.net/session.gc-divisor\n";
	stream << "session.gc_divisor = 1000\n";
	stream << "\n";
	stream << "; After this number of seconds, stored data will be seen as 'garbage' and\n";
	stream << "; cleaned up by the garbage collection process.\n";
	stream << "; http://php.net/session.gc-maxlifetime\n";
	stream << "session.gc_maxlifetime = 1440\n";
	stream << "\n";
	stream << "; NOTE: If you are using the subdirectory option for storing session files\n";
	stream << ";       (see session.save_path above), then garbage collection does *not*\n";
	stream << ";       happen automatically.  You will need to do your own garbage\n";
	stream << ";       collection through a shell script, cron entry, or some other method.\n";
	stream << ";       For example, the following script would is the equivalent of\n";
	stream << ";       setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):\n";
	stream << ";          find /path/to/sessions -cmin +24 | xargs rm\n";
	stream << "\n";
	stream << "; PHP 4.2 and less have an undocumented feature/bug that allows you to\n";
	stream << "; to initialize a session variable in the global scope.\n";
	stream << "; PHP 4.3 and later will warn you, if this feature is used.\n";
	stream << "; You can disable the feature and the warning separately. At this time,\n";
	stream << "; the warning is only displayed, if bug_compat_42 is enabled. This feature\n";
	stream << "; introduces some serious security problems if not handled correctly. It's\n";
	stream << "; recommended that you do not use this feature on production servers. But you\n";
	stream << "; should enable this on development servers and enable the warning as well. If you\n";
	stream << "; do not enable the feature on development servers, you won't be warned when it's\n";
	stream << "; used and debugging errors caused by this can be difficult to track down.\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/session.bug-compat-42\n";
	stream << "session.bug_compat_42 = On\n";
	stream << "\n";
	stream << "; This setting controls whether or not you are warned by PHP when initializing a\n";
	stream << "; session value into the global space. session.bug_compat_42 must be enabled before\n";
	stream << "; these warnings can be issued by PHP. See the directive above for more information.\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: Off\n";
	stream << "; http://php.net/session.bug-compat-warn\n";
	stream << "session.bug_compat_warn = On\n";
	stream << "\n";
	stream << "; Check HTTP Referer to invalidate externally stored URLs containing ids.\n";
	stream << "; HTTP_REFERER has to contain this substring for the session to be\n";
	stream << "; considered as valid.\n";
	stream << "; http://php.net/session.referer-check\n";
	stream << "session.referer_check =\n";
	stream << "\n";
	stream << "; How many bytes to read from the file.\n";
	stream << "; http://php.net/session.entropy-length\n";
	stream << ";session.entropy_length = 32\n";
	stream << "\n";
	stream << "; Specified here to create the session id.\n";
	stream << "; http://php.net/session.entropy-file\n";
	stream << "; Defaults to /dev/urandom\n";
	stream << "; On systems that don't have /dev/urandom but do have /dev/arandom, this will default to /dev/arandom\n";
	stream << "; If neither are found at compile time, the default is no entropy file.\n";
	stream << "; On windows, setting the entropy_length setting will activate the\n";
	stream << "; Windows random source (using the CryptoAPI)\n";
	stream << ";session.entropy_file = /dev/urandom\n";
	stream << "\n";
	stream << "; Set to {nocache,private,public,} to determine HTTP caching aspects\n";
	stream << "; or leave this empty to avoid sending anti-caching headers.\n";
	stream << "; http://php.net/session.cache-limiter\n";
	stream << "session.cache_limiter = nocache\n";
	stream << "\n";
	stream << "; Document expires after n minutes.\n";
	stream << "; http://php.net/session.cache-expire\n";
	stream << "session.cache_expire = 180\n";
	stream << "\n";
	stream << "; trans sid support is disabled by default.\n";
	stream << "; Use of trans sid may risk your users security.\n";
	stream << "; Use this option with caution.\n";
	stream << "; - User may send URL contains active session ID\n";
	stream << ";   to other person via. email/irc/etc.\n";
	stream << "; - URL that contains active session ID may be stored\n";
	stream << ";   in publicly accessible computer.\n";
	stream << "; - User may access your site with the same session ID\n";
	stream << ";   always using URL stored in browser's history or bookmarks.\n";
	stream << "; http://php.net/session.use-trans-sid\n";
	stream << "session.use_trans_sid = 0\n";
	stream << "\n";
	stream << "; Select a hash function for use in generating session ids.\n";
	stream << "; Possible Values\n";
	stream << ";   0  (MD5 128 bits)\n";
	stream << ";   1  (SHA-1 160 bits)\n";
	stream << "; This option may also be set to the name of any hash function supported by\n";
	stream << "; the hash extension. A list of available hashes is returned by the hash_algos()\n";
	stream << "; function.\n";
	stream << "; http://php.net/session.hash-function\n";
	stream << "session.hash_function = 0\n";
	stream << "\n";
	stream << "; Define how many bits are stored in each character when converting\n";
	stream << "; the binary hash data to something readable.\n";
	stream << "; Possible values:\n";
	stream << ";   4  (4 bits: 0-9, a-f)\n";
	stream << ";   5  (5 bits: 0-9, a-v)\n";
	stream << ";   6  (6 bits: 0-9, a-z, A-Z, \"-\", \",\")\n";
	stream << "; Default Value: 4\n";
	stream << "; Development Value: 5\n";
	stream << "; Production Value: 5\n";
	stream << "; http://php.net/session.hash-bits-per-character\n";
	stream << "session.hash_bits_per_character = 5\n";
	stream << "\n";
	stream << "; The URL rewriter will look for URLs in a defined set of HTML tags.\n";
	stream << "; form/fieldset are special; if you include them here, the rewriter will\n";
	stream << "; add a hidden <input> field with the info which is otherwise appended\n";
	stream << "; to URLs.  If you want XHTML conformity, remove the form entry.\n";
	stream << "; Note that all valid entries require a \"=\", even if no value follows.\n";
	stream << "; Default Value: \"a=href,area=href,frame=src,form=,fieldset=\"\n";
	stream << "; Development Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\n";
	stream << "; Production Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\n";
	stream << "; http://php.net/url-rewriter.tags\n";
	stream << "url_rewriter.tags = \"a=href,area=href,frame=src,input=src,form=fakeentry\"\n";
	stream << "\n";
	stream << "; Enable upload progress tracking in $_SESSION\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: On\n";
	stream << "; http://php.net/session.upload-progress.enabled\n";
	stream << ";session.upload_progress.enabled = On\n";
	stream << "\n";
	stream << "; Cleanup the progress information as soon as all POST data has been read\n";
	stream << "; (i.e. upload completed).\n";
	stream << "; Default Value: On\n";
	stream << "; Development Value: On\n";
	stream << "; Production Value: On\n";
	stream << "; http://php.net/session.upload-progress.cleanup\n";
	stream << ";session.upload_progress.cleanup = On\n";
	stream << "\n";
	stream << "; A prefix used for the upload progress key in $_SESSION\n";
	stream << "; Default Value: \"upload_progress_\"\n";
	stream << "; Development Value: \"upload_progress_\"\n";
	stream << "; Production Value: \"upload_progress_\"\n";
	stream << "; http://php.net/session.upload-progress.prefix\n";
	stream << ";session.upload_progress.prefix = \"upload_progress_\"\n";
	stream << "\n";
	stream << "; The index name (concatenated with the prefix) in $_SESSION\n";
	stream << "; containing the upload progress information\n";
	stream << "; Default Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n";
	stream << "; Development Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n";
	stream << "; Production Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n";
	stream << "; http://php.net/session.upload-progress.name\n";
	stream << ";session.upload_progress.name = \"PHP_SESSION_UPLOAD_PROGRESS\"\n";
	stream << "\n";
	stream << "; How frequently the upload progress should be updated.\n";
	stream << "; Given either in percentages (per-file), or in bytes\n";
	stream << "; Default Value: \"1%\"\n";
	stream << "; Development Value: \"1%\"\n";
	stream << "; Production Value: \"1%\"\n";
	stream << "; http://php.net/session.upload-progress.freq\n";
	stream << ";session.upload_progress.freq =  \"1%\"\n";
	stream << "\n";
	stream << "; The minimum delay between updates, in seconds\n";
	stream << "; Default Value: 1\n";
	stream << "; Development Value: 1\n";
	stream << "; Production Value: 1\n";
	stream << "; http://php.net/session.upload-progress.min-freq\n";
	stream << ";session.upload_progress.min_freq = \"1\"\n";
	stream << "\n";
	stream << "[MSSQL]\n";
	stream << "; Allow or prevent persistent links.\n";
	stream << "mssql.allow_persistent = On\n";
	stream << "\n";
	stream << "; Maximum number of persistent links.  -1 means no limit.\n";
	stream << "mssql.max_persistent = -1\n";
	stream << "\n";
	stream << "; Maximum number of links (persistent+non persistent).  -1 means no limit.\n";
	stream << "mssql.max_links = -1\n";
	stream << "\n";
	stream << "; Minimum error severity to display.\n";
	stream << "mssql.min_error_severity = 10\n";
	stream << "\n";
	stream << "; Minimum message severity to display.\n";
	stream << "mssql.min_message_severity = 10\n";
	stream << "\n";
	stream << "; Compatibility mode with old versions of PHP 3.0.\n";
	stream << "mssql.compatability_mode = Off\n";
	stream << "\n";
	stream << "; Connect timeout\n";
	stream << ";mssql.connect_timeout = 5\n";
	stream << "\n";
	stream << "; Query timeout\n";
	stream << ";mssql.timeout = 60\n";
	stream << "\n";
	stream << "; Valid range 0 - 2147483647.  Default = 4096.\n";
	stream << ";mssql.textlimit = 4096\n";
	stream << "\n";
	stream << "; Valid range 0 - 2147483647.  Default = 4096.\n";
	stream << ";mssql.textsize = 4096\n";
	stream << "\n";
	stream << "; Limits the number of records in each batch.  0 = all records in one batch.\n";
	stream << ";mssql.batchsize = 0\n";
	stream << "\n";
	stream << "; Specify how datetime and datetim4 columns are returned\n";
	stream << "; On => Returns data converted to SQL server settings\n";
	stream << "; Off => Returns values as YYYY-MM-DD hh:mm:ss\n";
	stream << ";mssql.datetimeconvert = On\n";
	stream << "\n";
	stream << "; Use NT authentication when connecting to the server\n";
	stream << "mssql.secure_connection = Off\n";
	stream << "\n";
	stream << "; Specify max number of processes. -1 = library default\n";
	stream << "; msdlib defaults to 25\n";
	stream << "; FreeTDS defaults to 4096\n";
	stream << ";mssql.max_procs = -1\n";
	stream << "\n";
	stream << "; Specify client character set.\n";
	stream << "; If empty or not set the client charset from freetds.conf is used\n";
	stream << "; This is only used when compiled with FreeTDS\n";
	stream << ";mssql.charset = \"ISO-8859-1\"\n";
	stream << "\n";
	stream << "[Assertion]\n";
	stream << "; Assert(expr); active by default.\n";
	stream << "; http://php.net/assert.active\n";
	stream << ";assert.active = On\n";
	stream << "\n";
	stream << "; Issue a PHP warning for each failed assertion.\n";
	stream << "; http://php.net/assert.warning\n";
	stream << ";assert.warning = On\n";
	stream << "\n";
	stream << "; Don't bail out by default.\n";
	stream << "; http://php.net/assert.bail\n";
	stream << ";assert.bail = Off\n";
	stream << "\n";
	stream << "; User-function to be called if an assertion fails.\n";
	stream << "; http://php.net/assert.callback\n";
	stream << ";assert.callback = 0\n";
	stream << "\n";
	stream << "; Eval the expression with current error_reporting().  Set to true if you want\n";
	stream << "; error_reporting(0) around the eval().\n";
	stream << "; http://php.net/assert.quiet-eval\n";
	stream << ";assert.quiet_eval = 0\n";
	stream << "\n";
	stream << "[COM]\n";
	stream << "; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs\n";
	stream << "; http://php.net/com.typelib-file\n";
	stream << ";com.typelib_file =\n";
	stream << "\n";
	stream << "; allow Distributed-COM calls\n";
	stream << "; http://php.net/com.allow-dcom\n";
	stream << ";com.allow_dcom = true\n";
	stream << "\n";
	stream << "; autoregister constants of a components typlib on com_load()\n";
	stream << "; http://php.net/com.autoregister-typelib\n";
	stream << ";com.autoregister_typelib = true\n";
	stream << "\n";
	stream << "; register constants casesensitive\n";
	stream << "; http://php.net/com.autoregister-casesensitive\n";
	stream << ";com.autoregister_casesensitive = false\n";
	stream << "\n";
	stream << "; show warnings on duplicate constant registrations\n";
	stream << "; http://php.net/com.autoregister-verbose\n";
	stream << ";com.autoregister_verbose = true\n";
	stream << "\n";
	stream << "; The default character set code-page to use when passing strings to and from COM objects.\n";
	stream << "; Default: system ANSI code page\n";
	stream << ";com.code_page=\n";
	stream << "\n";
	stream << "[mbstring]\n";
	stream << "; language for internal character representation.\n";
	stream << "; http://php.net/mbstring.language\n";
	stream << ";mbstring.language = Japanese\n";
	stream << "\n";
	stream << "; internal/script encoding.\n";
	stream << "; Some encoding cannot work as internal encoding.\n";
	stream << "; (e.g. SJIS, BIG5, ISO-2022-*)\n";
	stream << "; http://php.net/mbstring.internal-encoding\n";
	stream << ";mbstring.internal_encoding = EUC-JP\n";
	stream << "\n";
	stream << "; http input encoding.\n";
	stream << "; http://php.net/mbstring.http-input\n";
	stream << ";mbstring.http_input = auto\n";
	stream << "\n";
	stream << "; http output encoding. mb_output_handler must be\n";
	stream << "; registered as output buffer to function\n";
	stream << "; http://php.net/mbstring.http-output\n";
	stream << ";mbstring.http_output = SJIS\n";
	stream << "\n";
	stream << "; enable automatic encoding translation according to\n";
	stream << "; mbstring.internal_encoding setting. Input chars are\n";
	stream << "; converted to internal encoding by setting this to On.\n";
	stream << "; Note: Do _not_ use automatic encoding translation for\n";
	stream << ";       portable libs/applications.\n";
	stream << "; http://php.net/mbstring.encoding-translation\n";
	stream << ";mbstring.encoding_translation = Off\n";
	stream << "\n";
	stream << "; automatic encoding detection order.\n";
	stream << "; auto means\n";
	stream << "; http://php.net/mbstring.detect-order\n";
	stream << ";mbstring.detect_order = auto\n";
	stream << "\n";
	stream << "; substitute_character used when character cannot be converted\n";
	stream << "; one from another\n";
	stream << "; http://php.net/mbstring.substitute-character\n";
	stream << ";mbstring.substitute_character = none;\n";
	stream << "\n";
	stream << "; overload(replace) single byte functions by mbstring functions.\n";
	stream << "; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),\n";
	stream << "; etc. Possible values are 0,1,2,4 or combination of them.\n";
	stream << "; For example, 7 for overload everything.\n";
	stream << "; 0: No overload\n";
	stream << "; 1: Overload mail() function\n";
	stream << "; 2: Overload str*() functions\n";
	stream << "; 4: Overload ereg*() functions\n";
	stream << "; http://php.net/mbstring.func-overload\n";
	stream << ";mbstring.func_overload = 0\n";
	stream << "\n";
	stream << "; enable strict encoding detection.\n";
	stream << ";mbstring.strict_detection = Off\n";
	stream << "\n";
	stream << "; This directive specifies the regex pattern of content types for which mb_output_handler()\n";
	stream << "; is activated.\n";
	stream << "; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\\+xml)\n";
	stream << ";mbstring.http_output_conv_mimetype=\n";
	stream << "\n";
	stream << "[gd]\n";
	stream << "; Tell the jpeg decode to ignore warnings and try to create\n";
	stream << "; a gd image. The warning will then be displayed as notices\n";
	stream << "; disabled by default\n";
	stream << "; http://php.net/gd.jpeg-ignore-warning\n";
	stream << ";gd.jpeg_ignore_warning = 0\n";
	stream << "\n";
	stream << "[exif]\n";
	stream << "; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.\n";
	stream << "; With mbstring support this will automatically be converted into the encoding\n";
	stream << "; given by corresponding encode setting. When empty mbstring.internal_encoding\n";
	stream << "; is used. For the decode settings you can distinguish between motorola and\n";
	stream << "; intel byte order. A decode setting cannot be empty.\n";
	stream << "; http://php.net/exif.encode-unicode\n";
	stream << ";exif.encode_unicode = ISO-8859-15\n";
	stream << "\n";
	stream << "; http://php.net/exif.decode-unicode-motorola\n";
	stream << ";exif.decode_unicode_motorola = UCS-2BE\n";
	stream << "\n";
	stream << "; http://php.net/exif.decode-unicode-intel\n";
	stream << ";exif.decode_unicode_intel    = UCS-2LE\n";
	stream << "\n";
	stream << "; http://php.net/exif.encode-jis\n";
	stream << ";exif.encode_jis =\n";
	stream << "\n";
	stream << "; http://php.net/exif.decode-jis-motorola\n";
	stream << ";exif.decode_jis_motorola = JIS\n";
	stream << "\n";
	stream << "; http://php.net/exif.decode-jis-intel\n";
	stream << ";exif.decode_jis_intel    = JIS\n";
	stream << "\n";
	stream << "[Tidy]\n";
	stream << "; The path to a default tidy configuration file to use when using tidy\n";
	stream << "; http://php.net/tidy.default-config\n";
	stream << ";tidy.default_config = /usr/local/lib/php/default.tcfg\n";
	stream << "\n";
	stream << "; Should tidy clean and repair output automatically?\n";
	stream << "; WARNING: Do not use this option if you are generating non-html content\n";
	stream << "; such as dynamic images\n";
	stream << "; http://php.net/tidy.clean-output\n";
	stream << "tidy.clean_output = Off\n";
	stream << "\n";
	stream << "[soap]\n";
	stream << "; Enables or disables WSDL caching feature.\n";
	stream << "; http://php.net/soap.wsdl-cache-enabled\n";
	stream << "soap.wsdl_cache_enabled=1\n";
	stream << "\n";
	stream << "; Sets the directory name where SOAP extension will put cache files.\n";
	stream << "; http://php.net/soap.wsdl-cache-dir\n";
	stream << "soap.wsdl_cache_dir=\"/tmp\"\n";
	stream << "\n";
	stream << "; (time to live) Sets the number of second while cached file will be used\n";
	stream << "; instead of original one.\n";
	stream << "; http://php.net/soap.wsdl-cache-ttl\n";
	stream << "soap.wsdl_cache_ttl=86400\n";
	stream << "\n";
	stream << "; Sets the size of the cache limit. (Max. number of WSDL files to cache)\n";
	stream << "soap.wsdl_cache_limit = 5\n";
	stream << "\n";
	stream << "[sysvshm]\n";
	stream << "; A default size of the shared memory segment\n";
	stream << ";sysvshm.init_mem = 10000\n";
	stream << "\n";
	stream << "[ldap]\n";
	stream << "; Sets the maximum number of open links or -1 for unlimited.\n";
	stream << "ldap.max_links = -1\n";
	stream << "\n";
	stream << "[mcrypt]\n";
	stream << "; For more information about mcrypt settings see http://php.net/mcrypt-module-open\n";
	stream << "\n";
	stream << "; Directory where to load mcrypt algorithms\n";
	stream << "; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)\n";
	stream << ";mcrypt.algorithms_dir=\n";
	stream << "\n";
	stream << "; Directory where to load mcrypt modes\n";
	stream << "; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)\n";
	stream << ";mcrypt.modes_dir=\n";
	stream << "\n";
	stream << "[dba]\n";
	stream << ";dba.default_handler=\n";
	stream << "\n";
	stream << "; Local Variables:\n";
	stream << "; tab-width: 4\n";
	stream << "; End:\n";
    stream << "\n";
    stream << "[xdebug]\n";
    stream << "\n";
    stream << "xdebug.remote_enable=On\n";
}
